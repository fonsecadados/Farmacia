import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from response_generator import ResponseGenerator
from models import User

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

# Verificar se o token est√° configurado
if not TELEGRAM_TOKEN:
    logger.error("Token do Telegram n√£o configurado. Configure a vari√°vel TELEGRAM_TOKEN no arquivo .env")
    exit(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /start para iniciar a conversa com o bot"""
    user = update.effective_user
    
    # Registrar ou atualizar o usu√°rio no banco de dados
    try:
        User.create_or_update(
            user_id=str(user.id),
            platform="telegram",
            first_name=user.first_name,
            last_name=user.last_name,
            username=user.username
        )
    except Exception as e:
        logger.error(f"Erro ao registrar usu√°rio: {e}")
    
    # Mensagem de boas-vindas 
    num_loja = 27999999999
    welcome_message = (
        f"üëã Ol√°, {user.first_name}! üëã\n\n"
        "üìç Bem-vindo(a) ao Atendimento Virtualüìç\nüîπ Rede FARMES - Colina de Laranjeiras üîπ\n\n" 
        "Nosso atendimento √© HUMANIZADO e estamos aqui para otimizar o seu tempo, por isso escreva o medicamento ou o produto voc√™ procura para consultar disponibilidade\n\n\n "
        "OU digite o n√∫mero da op√ß√£o:\n\n"
        "1Ô∏è‚É£ Conhe√ßa nossa loja e os hor√°rios de funcionamento üè•\n\n"
        "2Ô∏è‚É£ Fazer cadastro na loja üïú\n\n"
        "3Ô∏è‚É£ Fique por dentro das PROMO√á√îES üíØ\n\n"
        "4Ô∏è‚É£ Tenho sintomas, preciso de recomenda√ß√µes üíä\n\n"
        "5Ô∏è‚É£ Perguntas Frequentes ‚ùî\n\n"
        "6Ô∏è‚É£ Sugest√µes/Reclama√ß√µes 	üì¢\n\n\n"
        f"Esse √© um canal de atendimento automatizado, para falar com vendedor ligue para nossa loja:\n\n"
        f"{num_loja}\n\n"
        "üíü Como podemos te ajudar hoje? üíü"
    )
    
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /help para exibir ajuda"""
    help_message = (
        "Aqui est√£o os comandos dispon√≠veis:\n\n"
        "/start - Iniciar ou reiniciar a conversa\n"
        "/help - Exibir esta mensagem de ajuda\n"
        "/horario - Verificar hor√°rio de funcionamento\n"
        "/localizacao - Ver a localiza√ß√£o da farm√°cia\n"
        "/falar_humano - Solicitar atendimento humano\n\n"
        "Voc√™ tamb√©m pode simplesmente enviar mensagens normais para perguntar sobre medicamentos, "
        "verificar disponibilidade de produtos ou descrever sintomas."
    )
    #
    await update.message.reply_text(help_message)

async def horario_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /horario para verificar hor√°rio de funcionamento"""
    horario_message = (
        "Nossa farm√°cia est√° aberta nos seguintes hor√°rios:\n\n"
        "Segunda a Sexta: 08:00 √†s 20:00\n"
        "S√°bados: 08:00 √†s 18:00\n"
        "Domingos e Feriados: 09:00 √†s 13:00\n\n"
        "Posso ajudar com mais alguma informa√ß√£o?"
    )
    
    await update.message.reply_text(horario_message)

async def localizacao_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /localizacao para ver a localiza√ß√£o da farm√°cia"""
    localizacao_message = (
        "Nossa farm√°cia est√° localizada na Av. Principal, 123 - Centro.\n\n"
        "Refer√™ncia: Pr√≥ximo ao Banco do Brasil.\n\n"
        "Voc√™ pode nos encontrar facilmente pelo Google Maps pesquisando por 'Farm√°cia Virtual'."
    )
    
    await update.message.reply_text(localizacao_message)

async def falar_humano_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /falar_humano para solicitar atendimento humano"""
    falar_humano_message = (
        "Entendo que voc√™ prefere falar com um atendente humano.\n\n"
        "Para isso, voc√™ pode ligar para nossa central de atendimento no n√∫mero (XX) XXXX-XXXX "
        "ou enviar um e-mail para atendimento@farmaciavirtual.com.br.\n\n"
        "Nosso hor√°rio de atendimento humano √© de segunda a sexta, das 8h √†s 18h."
    )
    
    await update.message.reply_text(falar_humano_message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Manipulador para mensagens de texto"""
    user = update.effective_user
    message_text = update.message.text
    
    # Registrar ou atualizar o usu√°rio no banco de dados (caso ainda n√£o tenha sido registrado)
    try:
        User.create_or_update(
            user_id=str(user.id),
            platform="telegram",
            first_name=user.first_name,
            last_name=user.last_name,
            username=user.username
        )
    except Exception as e:
        logger.error(f"Erro ao registrar usu√°rio: {e}")
        # Continuar mesmo com erro no banco de dados
    
    try:
        # Gerar resposta usando o ResponseGenerator
        response = ResponseGenerator.generate_response(str(user.id), "telegram", message_text)
        
        # Enviar a resposta
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"Erro ao processar mensagem: {e}")
        await update.message.reply_text(
            "Desculpe, ocorreu um erro ao processar sua mensagem. Por favor, tente novamente mais tarde."
        )

def main() -> None:
    """Fun√ß√£o principal para iniciar o bot"""
    # Criar o aplicativo
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # Adicionar handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("horario", horario_command))
    application.add_handler(CommandHandler("localizacao", localizacao_command))
    application.add_handler(CommandHandler("falar_humano", falar_humano_command))
    
    # Handler para mensagens de texto
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Iniciar o bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

