import logging
import os
import json
import requests
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from nlp_processor import NLPProcessor

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
load_dotenv()
WHATSAPP_TOKEN = os.getenv('WHATSAPP_TOKEN')
WHATSAPP_PHONE_ID = os.getenv('WHATSAPP_PHONE_ID')
VERIFY_TOKEN = os.getenv('VERIFY_TOKEN', 'farmacia_bot_verify_token')
PORT = int(os.getenv('PORT', 5000))

# Verificar se os tokens est√£o configurados
if not WHATSAPP_TOKEN or not WHATSAPP_PHONE_ID:
    logger.error("Token do WhatsApp ou Phone ID n√£o configurados. Configure as vari√°veis WHATSAPP_TOKEN e WHATSAPP_PHONE_ID no arquivo .env")
    exit(1)

# Criar aplica√ß√£o Flask
app = Flask(__name__)

# Dicion√°rio para armazenar contextos de conversa (simulando banco de dados)
user_contexts = {}

# Respostas pr√©-definidas para cada inten√ß√£o
RESPONSES = {
    'saudacao': (
        "Ol√°! Bem-vindo √† Farm√°cia Virtual. Como posso ajudar voc√™ hoje? üòä\n\n"
        "Posso fornecer informa√ß√µes sobre medicamentos, verificar disponibilidade de produtos, "
        "informar hor√°rios de funcionamento e muito mais."
    ),
    'despedida': (
        "Obrigado por entrar em contato! Estamos sempre √† disposi√ß√£o para ajudar. "
        "Tenha um √≥timo dia! üëã"
    ),
    'agradecimento': (
        "Por nada! Estou aqui para ajudar. Precisa de mais alguma coisa?"
    ),
    'info_medicamento': (
        "Voc√™ gostaria de informa√ß√µes sobre um medicamento espec√≠fico. "
        "Por favor, informe o nome do medicamento para que eu possa buscar os detalhes para voc√™."
    ),
    'preco': (
        "Para verificar o pre√ßo de um produto espec√≠fico, por favor informe o nome do medicamento ou produto."
    ),
    'disponibilidade': (
        "Para verificar a disponibilidade de um produto, por favor informe o nome do medicamento ou produto."
    ),
    'horario': (
        "Nossa farm√°cia est√° aberta nos seguintes hor√°rios:\n\n"
        "Segunda a Sexta: 08:00 √†s 20:00\n"
        "S√°bados: 08:00 √†s 18:00\n"
        "Domingos e Feriados: 09:00 √†s 13:00\n\n"
        "Posso ajudar com mais alguma informa√ß√£o?"
    ),
    'localizacao': (
        "Nossa farm√°cia est√° localizada na Av. Principal, 123 - Centro. \n\n"
        "Refer√™ncia: Pr√≥ximo ao Banco do Brasil.\n\n"
        "Voc√™ pode nos encontrar facilmente pelo Google Maps pesquisando por 'Farm√°cia Virtual'."
    ),
    'ajuda': (
        "Posso ajudar voc√™ com:\n\n"
        "- Informa√ß√µes sobre medicamentos\n"
        "- Pre√ßos de produtos\n"
        "- Verifica√ß√£o de disponibilidade em estoque\n"
        "- Hor√°rios de funcionamento\n"
        "- Localiza√ß√£o da farm√°cia\n"
        "- Recomenda√ß√µes para sintomas\n\n"
        "Como posso te ajudar hoje?"
    ),
    'falar_humano': (
        "Entendo que voc√™ prefere falar com um atendente humano. "
        "Para isso, voc√™ pode ligar para nossa central de atendimento no n√∫mero (XX) XXXX-XXXX "
        "ou enviar um e-mail para atendimento@farmaciavirtual.com.br.\n\n"
        "Nosso hor√°rio de atendimento humano √© de segunda a sexta, das 8h √†s 18h."
    ),
    'desconhecido': (
        "Desculpe, n√£o entendi completamente sua solicita√ß√£o. "
        "Posso ajudar com informa√ß√µes sobre medicamentos, pre√ßos, disponibilidade, "
        "hor√°rios de funcionamento ou localiza√ß√£o da farm√°cia. "
        "Como posso te ajudar?"
    )
}

def send_whatsapp_message(phone_number, message_text):
    """Envia uma mensagem para o WhatsApp"""
    url = f"https://graph.facebook.com/v17.0/{WHATSAPP_PHONE_ID}/messages"
    
    headers = {
        "Authorization": f"Bearer {WHATSAPP_TOKEN}",
        "Content-Type": "application/json"
    }
    
    data = {
        "messaging_product": "whatsapp",
        "recipient_type": "individual",
        "to": phone_number,
        "type": "text",
        "text": {
            "body": message_text
        }
    }
    
    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"Erro ao enviar mensagem para o WhatsApp: {e}")
        return None

@app.route('/webhook', methods=['GET'])
def verify_webhook():
    """Endpoint para verifica√ß√£o do webhook do WhatsApp"""
    mode = request.args.get('hub.mode')
    token = request.args.get('hub.verify_token')
    challenge = request.args.get('hub.challenge')
    
    if mode and token:
        if mode == 'subscribe' and token == VERIFY_TOKEN:
            logger.info("Webhook verificado com sucesso!")
            return challenge, 200
        else:
            logger.warning("Falha na verifica√ß√£o do webhook")
            return "Falha na verifica√ß√£o", 403
    
    return "Par√¢metros inv√°lidos", 400

@app.route('/webhook', methods=['POST'])
def webhook():
    """Endpoint para receber mensagens do WhatsApp"""
    data = request.json
    
    # Log para depura√ß√£o
    logger.info(f"Webhook recebido: {json.dumps(data, indent=2)}")
    
    # Verificar se √© uma mensagem do WhatsApp
    if 'object' in data and data['object'] == 'whatsapp_business_account':
        if 'entry' in data and data['entry']:
            for entry in data['entry']:
                if 'changes' in entry and entry['changes']:
                    for change in entry['changes']:
                        if 'value' in change and 'messages' in change['value']:
                            for message in change['value']['messages']:
                                if message['type'] == 'text':
                                    # Extrair informa√ß√µes da mensagem
                                    phone_number = message['from']
                                    message_text = message['text']['body']
                                    message_id = message['id']
                                    
                                    # Log para depura√ß√£o
                                    logger.info(f"Mensagem recebida de {phone_number}: {message_text}")
                                    
                                    # Analisar o texto com NLP
                                    nlp_result = NLPProcessor.analyze_text(message_text)
                                    intent = nlp_result['intent']
                                    entities = nlp_result['entities']
                                    
                                    # Log para depura√ß√£o
                                    logger.info(f"Inten√ß√£o detectada: {intent}")
                                    logger.info(f"Entidades detectadas: {entities}")
                                    
                                    # Verificar se h√° medicamentos mencionados
                                    medicamentos = entities.get('medicamentos', [])
                                    
                                    # Personalizar resposta com base na inten√ß√£o e entidades
                                    if intent in RESPONSES:
                                        response = RESPONSES[intent]
                                        
                                        # Personalizar resposta para medicamentos espec√≠ficos
                                        if intent == 'info_medicamento' and medicamentos:
                                            medicine_name = medicamentos[0]
                                            response = (
                                                f"Aqui est√£o as informa√ß√µes sobre {medicine_name}:\n\n"
                                                "- Indica√ß√£o: [informa√ß√µes de indica√ß√£o]\n"
                                                "- Posologia: [informa√ß√µes de posologia]\n"
                                                "- Efeitos colaterais: [informa√ß√µes de efeitos colaterais]\n"
                                                "- Contraindica√ß√µes: [informa√ß√µes de contraindica√ß√µes]\n\n"
                                                "Posso ajudar com mais alguma informa√ß√£o sobre este medicamento?"
                                            )
                                        elif intent == 'preco' and medicamentos:
                                            medicine_name = medicamentos[0]
                                            response = f"O pre√ßo atual de {medicine_name} √© R$ XX,XX. Posso ajudar com mais alguma informa√ß√£o?"
                                        elif intent == 'disponibilidade' and medicamentos:
                                            medicine_name = medicamentos[0]
                                            response = f"Verificamos e temos {medicine_name} dispon√≠vel em estoque! Deseja saber o pre√ßo ou mais informa√ß√µes sobre este produto?"
                                    else:
                                        # Verificar se h√° sintomas mencionados
                                        sintomas = entities.get('sintomas', [])
                                        if sintomas:
                                            symptom = sintomas[0]
                                            response = (
                                                f"Entendi que voc√™ est√° com {symptom}. Para sintomas como este, posso recomendar:\n\n"
                                                "1. [Medicamento 1] - [breve descri√ß√£o]\n"
                                                "2. [Medicamento 2] - [breve descri√ß√£o]\n"
                                                "3. [Medicamento 3] - [breve descri√ß√£o]\n\n"
                                                "Lembre-se que esta √© apenas uma sugest√£o inicial. Para um diagn√≥stico preciso, consulte um m√©dico ou farmac√™utico."
                                            )
                                        else:
                                            response = RESPONSES['desconhecido']
                                    
                                    # Enviar a resposta
                                    send_whatsapp_message(phone_number, response)
        
        return jsonify({"status": "success"}), 200
    
    return jsonify({"status": "error", "message": "Formato inv√°lido"}), 400

@app.route('/', methods=['GET'])
def index():
    """Endpoint raiz para verificar se o servidor est√° em execu√ß√£o"""
    return "WhatsApp Bot para Farm√°cia est√° em execu√ß√£o!", 200

def main():
    """Fun√ß√£o principal para iniciar o servidor Flask"""
    app.run(host='0.0.0.0', port=PORT, debug=False)

if __name__ == '__main__':
    main()

