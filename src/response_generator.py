from nlp_processor import NLPProcessor
from context_manager import ContextManager
from models import Product, FAQ, Conversation
import json

with open(r'C:\Users\syafo\VIX_Intelligence\Farmacia\json\sintomas_med.json', 'r', encoding='utf-8') as f:
    known_symptoms = json.load(f)

instagram_link = "https://www.instagram.com/xxxxx"
instagram_link_promos = "https://www.instagram.com/xxxxx"

MENU_OPTIONS = {
    '1': (f"üè™ Nossa loja fica em XXXX, n¬∞ 123 - XXXX - XX\n\n"
          f"üíü Aqui n√≥s cuidamos de voc√™! üíü\n"
          f"‚úîÔ∏è Funcionamos de Segunda √† S√°bado de 08h √†s 22h üïú\n\n"
          f"üìç Tudo em perfumeria e medicamentos com precinho que cabe no seu bolso! üí≤\n\n"
          f"Contamos com vagas de estacionamento para PCD, al√©m de atendimento personalizado!\n\n"
          f"\n"
          f"Visite nossa p√°gina no Instagram e fique por dentro das melhores promo√ß√µes do mercado!"
          f"\n\n"
          f"{instagram_link}\n\n"
          f"Digite 1Ô∏è‚É£ para voltar ao Menu principal\n"
          f"Digite 2Ô∏è‚É£ para ver PROMO√á√ïES\n"
         ),
    '2': (f"Bem vindo(a) ao cadastro na Farm√°cia XXXX!\n\n"
          f"‚ö†Ô∏è Aten√ß√£o ‚ö†Ô∏è\n"
          f"Para continuar com o cadastro √© preciso que voc√™ aceite a nossa POL√çTICA DE PRIVACIDADE, conforme orientado pela Lei Geral de Prote√ß√£o aos Dados (LGPD)\n\n"
          f"Acesse:\n"
          f"https:/www.xxxxx.com.br/institucional/politica-de-privacidade\n\n\n"
          f"Digite a op√ß√£o escolhida:\n\n"
          f"1Ô∏è‚É£ Aceito os termos\n"
          f"2Ô∏è‚É£ N√£o aceito os termos"
          ),
    '3': (f"üî• Fique por dentro das PROMO√á√ïES da semana na nossa p√°gina!\n\n"
          f"{instagram_link_promos}\n\n"
          ),
    '4': ("üí¨ Entendemos que voc√™ est√° apresentando alguns sintomas.\n\n Fale mais sobre eles para que possamos sugerir uma medica√ß√£o\n\n"
          "Digite 0Ô∏è‚É£ para voltar ao menu principal"),
    '5': (f"Algumas perguntas Frequentes no nosso canal:\n\n"
          f"Digite o N¬∞ para receber resposta:\n\n"
          f"1Ô∏è‚É£ Qual o hor√°rio de funcionamento da farm√°cia?\n\n"
          f"2Ô∏è‚É£ Quais formas de pagamento s√£o aceitas?\n\n"
          f"3Ô∏è‚É£ Voc√™s fazem entrega?\n\n"
          f"4Ô∏è‚É£ Preciso de receita para comprar antibi√≥ticos?\n\n"
          f"5Ô∏è‚É£ Voc√™s aceitam receitas digitais?\n\n"
          f"6Ô∏è‚É£ Voc√™s aplicam vacinas na farm√°cia?\n\n"
          f"7Ô∏è‚É£ Voc√™s medem press√£o arterial e glicose?\n\n"
          f"8Ô∏è‚É£ √â poss√≠vel fazer cadastro para receber promo√ß√µes?\n\n"
          f"9Ô∏è‚É£ Voc√™s vendem medicamentos manipulados?\n\n"
          f"1Ô∏è‚É£0Ô∏è‚É£ Posso trocar um produto comprado na farm√°cia?\n\n"
          f"1Ô∏è‚É£1Ô∏è‚É£ Como funciona o programa de fidelidade da farm√°cia?\n\n"
          f"1Ô∏è‚É£2Ô∏è‚É£ Voc√™s possuem estacionamento para clientes?\n\n"
          f"1Ô∏è‚É£3Ô∏è‚É£ Tem desconto para conv√™nios ou planos de sa√∫de?\n\n"
          f"1Ô∏è‚É£4Ô∏è‚É£ Quais s√£o os canais de atendimento da farm√°cia?\n\n\n"
          f"Digite 0Ô∏è‚É£ para retornar ao menu principal."
          ),
    '6': "üîî Outras op√ß√µes: falar com atendente, localiza√ß√£o no mapa etc."
}

class ResponseGenerator:
    """Gerador de respostas para o bot de farm√°cia"""

    @staticmethod
    def get_welcome_message(first_name=None):
        """Retorna a mensagem de boas-vindas personalizada"""
        num_loja = 27999999999
        name_greeting = f", {first_name}" if first_name else ""
        
        return (
            f"üëã Ol√°{name_greeting}! üëã\n\n"
            "üìç Bem-vindo(a) ao Sa√∫de Virtualüìç\nüîπ Seu Farmac√™utico Virtual em parceria com a Farm√°cia XXX üîπ\n\n" 
            "Nosso objetivo √© te auxiliar na escolha do medicamento ideal para cada situa√ß√£o.\n\n"
            "Est√° com algum sintoma? Digite o que voc√™ est√° sentindo que vamos indicar a medica√ß√£o correta!\n\n"
            "N√ÉO INDICAMOS MEDICA√á√ÉO COM PRESCRI√á√ÉO M√âDICA\n\n\n"
            "OU digite o n√∫mero da op√ß√£o:\n\n"
            "1Ô∏è‚É£ Conhe√ßa nossa loja e os hor√°rios de funcionamento üè•\n\n"
            "2Ô∏è‚É£ Fazer cadastro na loja üïú\n\n"
            "3Ô∏è‚É£ Fique por dentro das PROMO√á√ïES üíØ\n\n"
            "4Ô∏è‚É£ Tenho sintomas, preciso de recomenda√ß√µes üíä\n\n"
            "5Ô∏è‚É£ Perguntas Frequentes ‚ùî\n\n"
            "6Ô∏è‚É£ Sugest√µes/Reclama√ß√µes üì¢\n\n\n"
            f"Esse √© um canal de atendimento automatizado, para falar com vendedor ligue para nossa loja:\n\n"
            f"{num_loja}\n\n"
            "üíü Como podemos te ajudar hoje? üíü"
        )

    @staticmethod
    def _get_main_menu_text():
        """Retorna o texto do menu principal"""
        return ResponseGenerator.get_welcome_message()

    @staticmethod
    def generate_response(user_id, platform, message_text):
        """Gera uma resposta com base na mensagem do usu√°rio e no contexto"""
        Conversation.save_message(user_id, platform, message_text, is_from_user=True)

        opcao = message_text.strip()
        current_context = ContextManager.get_current_context(user_id, platform)

        # Tratamento do submenu da op√ß√£o '1' (informa√ß√µes da loja)
        if current_context == ContextManager.CONTEXT_TYPES.get('INFO_LOJA_SUBMENU'):
            if opcao == '1':
                ContextManager.set_context(user_id, platform, ContextManager.CONTEXT_TYPES['MAIN_MENU'], {})
                resposta = ResponseGenerator._get_main_menu_text()
            elif opcao == '2':
                resposta = MENU_OPTIONS['3']
            else:
                resposta = "Por favor, digite 1Ô∏è‚É£ para voltar ao Menu principal ou 2Ô∏è‚É£ para ver PROMO√á√ïES."
            
            Conversation.save_message(user_id, platform, resposta, is_from_user=False)
            return resposta

        # Se estiver no menu principal e digitar uma op√ß√£o num√©rica
        elif current_context == ContextManager.CONTEXT_TYPES.get('MAIN_MENU') and opcao in MENU_OPTIONS:
            if opcao == '1':
                ContextManager.set_context(user_id, platform, ContextManager.CONTEXT_TYPES['INFO_LOJA_SUBMENU'], {})
                resposta = MENU_OPTIONS['1']
            elif opcao == '2':
                ContextManager.set_context(user_id, platform, ContextManager.CONTEXT_TYPES['WAITING_LGPD_RESPONSE'], {})
                resposta = MENU_OPTIONS['2']
            elif opcao == '3':
                resposta = MENU_OPTIONS['3']
            elif opcao == '4':
                ContextManager.set_context(user_id, platform, ContextManager.CONTEXT_TYPES['WAITING_SYMPTOM'], {})
                resposta = MENU_OPTIONS['4']
            elif opcao == '5':
                ContextManager.set_context(user_id, platform, ContextManager.CONTEXT_TYPES['FAQ'], {})
                resposta = MENU_OPTIONS['5']
            elif opcao == '6':
                ContextManager.set_context(user_id, platform, ContextManager.CONTEXT_TYPES['OTHER_OPTIONS'], {})
                resposta = MENU_OPTIONS['6']

            Conversation.save_message(user_id, platform, resposta, is_from_user=False)
            return resposta

        # Tratamento de respostas dentro do contexto WAITING_LGPD_RESPONSE
        elif current_context == ContextManager.CONTEXT_TYPES.get('WAITING_LGPD_RESPONSE'):
            if opcao == '1':
                resposta = "Obrigado por aceitar nossa Pol√≠tica de Privacidade. Agora podemos continuar com seu cadastro."
                ContextManager.set_context(user_id, platform, ContextManager.CONTEXT_TYPES['MAIN_MENU'], {})
            elif opcao == '2':
                resposta = "Voc√™ precisa aceitar a Pol√≠tica de Privacidade para continuar. Caso queira, digite 1Ô∏è‚É£ para aceitar."
            else:
                resposta = "Por favor, digite 1Ô∏è‚É£ para aceitar ou 2Ô∏è‚É£ para recusar a Pol√≠tica de Privacidade."

            Conversation.save_message(user_id, platform, resposta, is_from_user=False)
            return resposta

        # Tratamento do contexto FAQ
        elif current_context == ContextManager.CONTEXT_TYPES.get('FAQ'):
            faq_answers = {
                '1': "Nossa farm√°cia funciona de segunda √† s√°bado, das 08h √†s 22h.",
                '2': "Aceitamos dinheiro, cart√µes de cr√©dito e d√©bito, e PIX.",
                '3': "Sim, fazemos entrega na cidade. Consulte a disponibilidade para sua regi√£o.",
                '4': "Sim, antibi√≥ticos s√≥ vendemos com receita m√©dica.",
                '5': "Sim, aceitamos receitas digitais v√°lidas conforme a legisla√ß√£o.",
                '6': "Sim, aplicamos vacinas contra gripe, covid e outras.",
                '7': "Sim, medimos press√£o arterial e glicose gratuitamente.",
                '8': "Sim, voc√™ pode se cadastrar para receber nossas promo√ß√µes via WhatsApp e e-mail.",
                '9': "N√£o, n√£o trabalhamos com medicamentos manipulados.",
                '10': "Sim, troca de produtos pode ser feita conforme nossa pol√≠tica de trocas em at√© 7 dias.",
                '11': "Nosso programa de fidelidade oferece descontos e pontos em compras.",
                '12': "Sim, temos estacionamento gratuito para clientes.",
                '13': "Oferecemos descontos para conv√™nios parceiros. Consulte na loja.",
                '14': "Atendemos via telefone, WhatsApp e presencialmente na loja."
            }
            if opcao == '0':
                ContextManager.set_context(user_id, platform, ContextManager.CONTEXT_TYPES['MAIN_MENU'], {})
                resposta = ResponseGenerator._get_main_menu_text()
            elif opcao in faq_answers:
                resposta = faq_answers[opcao] + "\n\nDigite outro n√∫mero para mais perguntas ou 0Ô∏è‚É£ para voltar ao menu principal."
            else:
                resposta = "Por favor, digite um n√∫mero v√°lido das perguntas frequentes ou 0Ô∏è‚É£ para voltar ao menu principal."

            Conversation.save_message(user_id, platform, resposta, is_from_user=False)
            return resposta

        # Contexto de sintomas
        elif current_context == ContextManager.CONTEXT_TYPES.get('WAITING_SYMPTOM'):
            if opcao == '0':
                ContextManager.set_context(user_id, platform, ContextManager.CONTEXT_TYPES['MAIN_MENU'], {})
                resposta = ResponseGenerator._get_main_menu_text()
            else:
                resposta = f"Voc√™ mencionou: {message_text}. Estamos analisando seus sintomas para sugerir um medicamento."
            
            Conversation.save_message(user_id, platform, resposta, is_from_user=False)
            return resposta

        # Verifica√ß√£o de sintomas/medicamentos
        entities = NLPProcessor.get_entities_from_products()
        message_lower = message_text.lower()

        if any(ent.lower() in message_lower for ent in entities['sintomas'] + entities['medicamentos']):
            ContextManager.set_context(user_id, platform, ContextManager.CONTEXT_TYPES['WAITING_SYMPTOM'], {})
            print('OK at√© aqui')
            # Agora j√° processa diretamente
            resposta, new_context_type, context_data = ContextManager.process_in_context(user_id, platform, message_text, {'intent': None})
            if resposta:
                ContextManager.set_context(user_id, platform, new_context_type, context_data or {})
                Conversation.save_message(user_id, platform, resposta, is_from_user=False)
                return resposta

        # Caso padr√£o - mostrar menu principal
        ContextManager.set_context(user_id, platform, ContextManager.CONTEXT_TYPES['MAIN_MENU'], {})
        resposta = ResponseGenerator._get_main_menu_text()
        Conversation.save_message(user_id, platform, resposta, is_from_user=False)
        return resposta