from nlp_processor import NLPProcessor
from context_manager import ContextManager
from models import Product, FAQ, Conversation
import json

with open(r'C:\Users\syafo\VIX_Intelligence\Farmacia\json\sintomas_med.json', 'r', encoding='utf-8') as f:
    known_symptoms = json.load(f)

instagram_link = "https://www.instagram.com/farmes.colina?igsh=dXMwMzAycm9keHlp"
instagram_link_promos = "https://www.instagram.com/s/aGlnaGxpZ2h0OjE4MTA1ODI0OTM1NTE2NTAw?story_media_id=3646291519857893134_3212031575&igsh=MW94YXR5c2F2dHlzbw=="
MENU_OPTIONS = {
    '1':( f"üè™ Nossa loja fica em Colina de Laranjeiras, n¬∞ 123 - Serra - ES\n\n"
          f"üíü Aqui n√≥s cuidamos de voc√™! üíü\n"
          f"‚úîÔ∏è Funcionamos de Segunda √† S√°bado de 08h √†s 22h üïú\n\n"
          f"üìç Tudo em perfumeria e medicamentos com precinho que cabe no seu bolso! üí≤\n\n"
          f"Contamos com vagas de estacionamento para PCD, al√©m de atendimento parsonalizado!\n\n"
          f"\n"
          f"Visite nossa p√°gina no Instagram e fique por dentro das melhores promo√ß√µes do mercado!"
          f"\n\n"
          f"{instagram_link}\n\n"
          f"Digite 1Ô∏è‚É£ para voltar ao Menu principal\n"
          f"Digite 2Ô∏è‚É£ para ver PROMO√á√îES\n"
         ),
    '2':( f"Bem vindo(a) ao cadastro na REDE Farmes!\n\n"
          f"‚ö†Ô∏è Aten√ß√£o ‚ö†Ô∏è\n"
          f"Para continuar com o cadastro √© preciso que voc√™ aceite a nossa POL√çTICA DE PRIVACIDADE, conforme orientedo pela Lei Geral de Prote√ß√£o aos Dados (LGPD)\n\n"
          f"Acesse:\n"
          f"https:/www.redefarmes.com.br/institucional/politica-de-privacidade\n\n\n"
          f"Digite a op√ß√£o escolhida:\n\n"
          f"1Ô∏è‚É£ Aceito os termos\n"
          f"2Ô∏è‚É£ N√£o aceito os termos"
          ),
    '3': (f"üî• Fique por dentro das PROMO√á√îES da semana na nossa p√°gina!\n\n"
          f"{instagram_link_promos}\n\n"
          ),
    '4': "üí¨ Entandemos que voc√™ est√° apresentando alguns sintomas.\n\n Fale mais sobre eles para que possamos sugerir uma medica√ß√£o\n\n"
         "Digite 0Ô∏è‚É£ para voltar ao menu principal",
    '5': (f"Algumas perguntas Frequentes no nosso canal:\n\n"
          f"Digite o N¬∞ para receber resposta:\n\n"
          f"1Ô∏è‚É£ Qual o hor√°rio de funcionamento da farm√°cia?\n\n"
          f"2Ô∏è‚É£ Quais formas de pagamento s√£o aceitas?\n\n"
          f"3Ô∏è‚É£ Voc√™s fazem entrega?\n\n"
          f"4Ô∏è‚É£ Preciso de receita para comprar antibi√≥ticos?\n\n"
          f"5Ô∏è‚É£ Voc√™s aceitam receitas digitais?\n\n"
          f"6Ô∏è‚É£ Voc√™s aplicam vacinas na farm√°cia?\n\n"
          f"7Ô∏è‚É£ Voc√™s medem press√£o arterial e glicose?\n\n"
          f"8Ô∏è‚É£ √â poss√≠vel fazer cadastro para receber promo√ß√µes?\n\n"
          f"9Ô∏è‚É£ Voc√™s vendem medicamentos manipulados?\n\n"
          f"1Ô∏è‚É£0Ô∏è‚É£ Posso trocar um produto comprado na farm√°cia?\n\n"
          f"1Ô∏è‚É£1Ô∏è‚É£ Como funciona o programa de fidelidade da farm√°cia?\n\n"
          f"1Ô∏è‚É£2Ô∏è‚É£ Voc√™s possuem estacionamento para clientes?\n\n"
          f"1Ô∏è‚É£3Ô∏è‚É£ Tem desconto para conv√™nios ou planos de sa√∫de?\n\n"
          f"1Ô∏è‚É£4Ô∏è‚É£ Quais s√£o os canais de atendimento da farm√°cia?\n\n\n"
          f"Digite 0Ô∏è‚É£ para retornar ao menu principal."  
          ),
    '6': "üîî Outras op√ß√µes: falar com atendente, localiza√ß√£o no mapa etc."
}


class ResponseGenerator:
    """Gerador de respostas para o bot de farm√°cia"""
            
    @staticmethod
    def generate_response(user_id, platform, message_text):
        """Gera uma resposta com base na mensagem do usu√°rio e no contexto"""

        # Salvar a mensagem do usu√°rio
        Conversation.save_message(user_id, platform, message_text, is_from_user=True)

        # Verificar se o usu√°rio digitou uma op√ß√£o num√©rica do menu
        opcao = message_text.strip()
        if opcao in MENU_OPTIONS:
            resposta_menu = MENU_OPTIONS[opcao]

            # Se a op√ß√£o for 4, iniciar contexto de sintomas
            if opcao == '4':
                ContextManager.set_context(
                    user_id,
                    platform,
                    ContextManager.CONTEXT_TYPES['WAITING_SYMPTOM'],
                    {}
                )
            elif opcao == '5':
                ContextManager.set_context(
                    user_id, 
                    platform, 
                    ContextManager.CONTEXT_TYPES['FAQ'],
                    {}
                )

            Conversation.save_message(user_id, platform, resposta_menu, is_from_user=False)
            return resposta_menu

        # Analisar o texto com NLP
        nlp_result = NLPProcessor.analyze_text(message_text)

        # Verificar se h√° um contexto ativo e processar a mensagem nesse contexto
        context_response = ContextManager.process_in_context(user_id, platform, message_text, nlp_result)

        if context_response and context_response[0]:
            response, new_context_type, new_context_data = context_response

            # Atualizar o contexto se necess√°rio
            if new_context_type:
                ContextManager.set_context(user_id, platform, new_context_type, new_context_data)
            elif new_context_type == ContextManager.CONTEXT_TYPES['NONE']:
                ContextManager.clear_context(user_id, platform)

            # Salvar a resposta do bot
            Conversation.save_message(user_id, platform, response, is_from_user=False)
            return response

        # Se n√£o houver contexto ativo ou o contexto n√£o gerou resposta,
        # processar a mensagem normalmente com base na inten√ß√£o
        intent = nlp_result['intent']
        entities = nlp_result['entities']

        # Gerar resposta com base na inten√ß√£o
        response = ResponseGenerator._generate_response_by_intent(intent, entities, user_id, platform, message_text)

        # Salvar a resposta do bot
        Conversation.save_message(user_id, platform, response, is_from_user=False)
        return response


    @staticmethod
    def _generate_response_by_intent(intent, entities, user_id, platform, message_text):
        """Gera uma resposta com base na inten√ß√£o identificada"""

        if intent == 'saudacao':
            return (
                "Ol√°! Bem-vindo √† Farm√°cia Virtual. Como posso ajudar voc√™ hoje? üòä\n\n"
                "Posso fornecer informa√ß√µes sobre medicamentos, verificar disponibilidade de produtos, "
                "informar hor√°rios de funcionamento e muito mais."
            )

        elif intent == 'despedida':
            return (
                "Obrigado por entrar em contato! Estamos sempre √† disposi√ß√£o para ajudar. "
                "Tenha um √≥timo dia! üëã"
            )

        elif intent == 'agradecimento':
            return (
                "Por nada! Estou aqui para ajudar. Precisa de mais alguma coisa?"
            )

        elif intent == 'info_medicamento':
            # Verificar se h√° medicamentos mencionados
            medicamentos = entities.get('medicamentos', [])
            if medicamentos:
                medicine_name = medicamentos[0]

                # Definir contexto para continuar falando sobre este medicamento
                ContextManager.set_context(
                    user_id, 
                    platform, 
                    ContextManager.CONTEXT_TYPES['ASKING_MEDICINE_INFO'],
                    {'medicine_name': medicine_name}
                )

                return (
                    f"Voc√™ gostaria de informa√ß√µes sobre {medicine_name}. "
                    f"Estou buscando os detalhes para voc√™..."
                )
            else:
                return (
                    "Qual medicamento voc√™ gostaria de saber mais informa√ß√µes? "
                    "Por favor, informe o nome do medicamento."
                )

        elif intent == 'preco':
            # Verificar se h√° medicamentos mencionados
            medicamentos = entities.get('medicamentos', [])
            if medicamentos:
                medicine_name = medicamentos[0]

                # Aqui seria implementada a l√≥gica para buscar o pre√ßo
                # Por enquanto, apenas simulamos uma resposta
                return f"O pre√ßo atual de {medicine_name} √© R$ XX,XX. Posso ajudar com mais alguma informa√ß√£o?"
            else:
                return (
                    "Qual produto voc√™ gostaria de saber o pre√ßo? "
                    "Por favor, informe o nome do produto."
                )

        elif intent == 'disponibilidade':
            # Verificar se h√° medicamentos mencionados
            medicamentos = entities.get('medicamentos', [])
            if medicamentos:
                product_name = medicamentos[0]

                # Definir contexto para continuar falando sobre este produto
                ContextManager.set_context(
                    user_id, 
                    platform, 
                    ContextManager.CONTEXT_TYPES['CHECKING_STOCK'],
                    {'product_name': product_name}
                )

                return (
                    f"Voc√™ gostaria de verificar a disponibilidade de {product_name}. "
                    f"Estou consultando nosso estoque..."
                )
            else:
                return (
                    "Qual produto voc√™ gostaria de verificar a disponibilidade? "
                    "Por favor, informe o nome do produto."
                )

        elif intent == 'horario':
            return (
                "Nossa farm√°cia est√° aberta nos seguintes hor√°rios:\n\n"
                "Segunda a Sexta: 08:00 √†s 20:00\n"
                "S√°bados: 08:00 √†s 18:00\n"
                "Domingos e Feriados: 09:00 √†s 13:00\n\n"
                "Posso ajudar com mais alguma informa√ß√£o?"
            )

        elif intent == 'localizacao':
            return (
                "Nossa farm√°cia est√° localizada na Av. Principal, 123 - Centro. \n\n"
                "Refer√™ncia: Pr√≥ximo ao Banco do Brasil.\n\n"
                "Voc√™ pode nos encontrar facilmente pelo Google Maps pesquisando por 'Farm√°cia Virtual'."
            )

        elif intent == 'ajuda':
            return (
                "Posso ajudar voc√™ com:\n\n"
                "- Informa√ß√µes sobre medicamentos\n"
                "- Pre√ßos de produtos\n"
                "- Verifica√ß√£o de disponibilidade em estoque\n"
                "- Hor√°rios de funcionamento\n"
                "- Localiza√ß√£o da farm√°cia\n"
                "- Recomenda√ß√µes para sintomas\n\n"
                "Como posso te ajudar hoje?"
            )

        elif intent == 'falar_humano':
            return (
                "Entendo que voc√™ prefere falar com um atendente humano. "
                "Para isso, voc√™ pode ligar para nossa central de atendimento no n√∫mero (XX) XXXX-XXXX "
                "ou enviar um e-mail para atendimento@farmaciavirtual.com.br.\n\n"
                "Nosso hor√°rio de atendimento humano √© de segunda a sexta, das 8h √†s 18h."
            )

        else:  # intent == 'desconhecido' ou qualquer outro n√£o tratado
            sintomas = entities.get('sintomas', [])

            # Al√©m dos sintomas j√° extra√≠dos, tente encontrar sintomas pelos sin√¥nimos no texto do usu√°rio
            texto_lower = message_text.lower()
            sintomas_encontrados = set(sintomas)  # come√ßar com os sintomas j√° extra√≠dos

            for sintoma, info in known_symptoms.items():
                # Verifica o sintoma principal
                if sintoma in texto_lower:
                    sintomas_encontrados.add(sintoma)
                # Verifica os sin√¥nimos
                for sinonimo in info.get('sinonimos', []):
                    if sinonimo in texto_lower:
                        sintomas_encontrados.add(sintoma)

            sintomas_encontrados = list(sintomas_encontrados)

            if not sintomas_encontrados:
                # Nenhum sintoma identificado na entidade, pede mais detalhes
                return (
                    "N√£o consegui identificar sintomas claros na sua mensagem. "
                    "Por favor, descreva melhor os sintomas que voc√™ est√° sentindo.\n\n"
                    "Ou digite 0Ô∏è‚É£ para voltar ao menu principal."
                )

            response = ""
            for sintoma in sintomas_encontrados:
                # Detectar se o sintoma est√° na base conhecida
                matched_symptoms = ContextManager.detectar_sintoma_spacy(sintoma, known_symptoms)

                if matched_symptoms:
                    for matched_sintoma in matched_symptoms:
                        medicamentos = known_symptoms.get(matched_sintoma, {}).get('medicamentos', [])

                        if not medicamentos:
                            response += f"‚ö†Ô∏è Nenhum medicamento sugerido para o sintoma: *{matched_sintoma}*\n\n"
                            continue

                        response += f"Para o sintoma *{matched_sintoma}*, posso sugerir:\n\n"
                        for i, med_name in enumerate(medicamentos, 1):
                            product = Product.get_product_by_name(med_name)
                            if product:
                                description = product.get('description', 'Sem descri√ß√£o dispon√≠vel.')
                                manufacturer = product.get('manufacturer', 'Desconhecido')
                                price = product.get('price', 'N/A')
                                administration = product.get('administration_route', 'Via n√£o informada')
                            else:
                                description = 'Medicamento n√£o encontrado no banco de dados.'
                                manufacturer = 'Desconhecido'
                                price = 'N/A'
                                administration = 'Via n√£o informada'

                            response += (
                                f"\n"
                                f"üîπ {i}. {med_name.upper()} - {description}\n\n"
                            )
                        response += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
                # else:
                #     # Caso o sintoma enviado n√£o esteja no known_symptoms
                #     response += (
                #         f"N√£o consegui associar o sintoma *{sintoma}* a nenhuma medica√ß√£o. "
                #         "Por favor, forne√ßa mais detalhes ou descreva outro sintoma.\n\n"
                #     )

            response += (
                "‚ö†Ô∏è ATEN√á√ÉO ‚ö†Ô∏è\n\n"
                "A sugest√£o de medica√ß√£o √© para fins de agilizar seu atendimento\n\n"
                "N√ÉO INDICAMOS A AUTOMEDICA√á√ÉO\n\n"
                "Digite 1Ô∏è‚É£ para ser falar com um de nossos atendentes\n\n"
                "Digite 0Ô∏è‚É£ para retornar ao menu anterior\n"
            )

            return response, ContextManager.CONTEXT_TYPES['NONE'], None

            # response += (
            #     "Lembre-se que esta √© apenas uma sugest√£o inicial.\n"
            #     "Gostaria de seguir com o atendimento? Digite o n√∫mero do medicamento ou envie outro sintoma.\n"
            #     "Digite 0Ô∏è‚É£ para voltar ao menu principal."
            # )

            # # Define o contexto para aguardar o pr√≥ximo sintoma
            # ContextManager.set_context(user_id, platform, ContextManager.CONTEXT_TYPES['WAITING_SYMPTOM'], {'symptoms': sintomas_encontrados})
