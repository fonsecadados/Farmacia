import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from nlp_processor import NLPProcessor

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

# Verificar se o token est√° configurado
if not TELEGRAM_TOKEN:
    logger.error("Token do Telegram n√£o configurado. Configure a vari√°vel TELEGRAM_TOKEN no arquivo .env")
    exit(1)

# Dicion√°rio para armazenar contextos de conversa (simulando banco de dados)
user_contexts = {}

# Respostas pr√©-definidas para cada inten√ß√£o
RESPONSES = {
    'saudacao': (
        "Ol√°! Bem-vindo √† Farm√°cia Virtual. Como posso ajudar voc√™ hoje? üòä\n\n"
        "Posso fornecer informa√ß√µes sobre medicamentos, verificar disponibilidade de produtos, "
        "informar hor√°rios de funcionamento e muito mais."
    ),
    'despedida': (
        "Obrigado por entrar em contato! Estamos sempre √† disposi√ß√£o para ajudar. "
        "Tenha um √≥timo dia! üëã"
    ),
    'agradecimento': (
        "Por nada! Estou aqui para ajudar. Precisa de mais alguma coisa?"
    ),
    'info_medicamento': (
        "Voc√™ gostaria de informa√ß√µes sobre um medicamento espec√≠fico. "
        "Por favor, informe o nome do medicamento para que eu possa buscar os detalhes para voc√™."
    ),
    'preco': (
        "Para verificar o pre√ßo de um produto espec√≠fico, por favor informe o nome do medicamento ou produto."
    ),
    'disponibilidade': (
        "Para verificar a disponibilidade de um produto, por favor informe o nome do medicamento ou produto."
    ),
    'horario': (
        "Nossa farm√°cia est√° aberta nos seguintes hor√°rios:\n\n"
        "Segunda a Sexta: 08:00 √†s 20:00\n"
        "S√°bados: 08:00 √†s 18:00\n"
        "Domingos e Feriados: 09:00 √†s 13:00\n\n"
        "Posso ajudar com mais alguma informa√ß√£o?"
    ),
    'localizacao': (
        "Nossa farm√°cia est√° localizada na Av. Principal, 123 - Centro. \n\n"
        "Refer√™ncia: Pr√≥ximo ao Banco do Brasil.\n\n"
        "Voc√™ pode nos encontrar facilmente pelo Google Maps pesquisando por 'Farm√°cia Virtual'."
    ),
    'ajuda': (
        "Posso ajudar voc√™ com:\n\n"
        "- Informa√ß√µes sobre medicamentos\n"
        "- Pre√ßos de produtos\n"
        "- Verifica√ß√£o de disponibilidade em estoque\n"
        "- Hor√°rios de funcionamento\n"
        "- Localiza√ß√£o da farm√°cia\n"
        "- Recomenda√ß√µes para sintomas\n\n"
        "Como posso te ajudar hoje?"
    ),
    'falar_humano': (
        "Entendo que voc√™ prefere falar com um atendente humano. "
        "Para isso, voc√™ pode ligar para nossa central de atendimento no n√∫mero (XX) XXXX-XXXX "
        "ou enviar um e-mail para atendimento@farmaciavirtual.com.br.\n\n"
        "Nosso hor√°rio de atendimento humano √© de segunda a sexta, das 8h √†s 18h."
    ),
    'desconhecido': (
        "Desculpe, n√£o entendi completamente sua solicita√ß√£o. "
        "Posso ajudar com informa√ß√µes sobre medicamentos, pre√ßos, disponibilidade, "
        "hor√°rios de funcionamento ou localiza√ß√£o da farm√°cia. "
        "Como posso te ajudar?"
    )
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /start para iniciar a conversa com o bot"""
    user = update.effective_user
    
    # Mensagem de boas-vindas
    welcome_message = (
        f"Ol√°, {user.first_name}! üëã\n\n"
        "Bem-vindo(a) ao Bot da Farm√°cia Virtual. Estou aqui para ajudar voc√™ com:\n\n"
        "‚Ä¢ Informa√ß√µes sobre medicamentos\n"
        "‚Ä¢ Verifica√ß√£o de disponibilidade de produtos\n"
        "‚Ä¢ Hor√°rios de funcionamento\n"
        "‚Ä¢ Localiza√ß√£o da farm√°cia\n"
        "‚Ä¢ Recomenda√ß√µes para sintomas\n\n"
        "Como posso te ajudar hoje?"
    )
    
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /help para exibir ajuda"""
    help_message = (
        "Aqui est√£o os comandos dispon√≠veis:\n\n"
        "/start - Iniciar ou reiniciar a conversa\n"
        "/help - Exibir esta mensagem de ajuda\n"
        "/horario - Verificar hor√°rio de funcionamento\n"
        "/localizacao - Ver a localiza√ß√£o da farm√°cia\n"
        "/falar_humano - Solicitar atendimento humano\n\n"
        "Voc√™ tamb√©m pode simplesmente enviar mensagens normais para perguntar sobre medicamentos, "
        "verificar disponibilidade de produtos ou descrever sintomas."
    )
    
    await update.message.reply_text(help_message)

async def horario_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /horario para verificar hor√°rio de funcionamento"""
    await update.message.reply_text(RESPONSES['horario'])

async def localizacao_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /localizacao para ver a localiza√ß√£o da farm√°cia"""
    await update.message.reply_text(RESPONSES['localizacao'])

async def falar_humano_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando /falar_humano para solicitar atendimento humano"""
    await update.message.reply_text(RESPONSES['falar_humano'])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Manipulador para mensagens de texto"""
    user = update.effective_user
    message_text = update.message.text
    user_id = str(user.id)
    
    # Analisar o texto com NLP
    nlp_result = NLPProcessor.analyze_text(message_text)
    intent = nlp_result['intent']
    entities = nlp_result['entities']
    
    # Log para depura√ß√£o
    logger.info(f"Usu√°rio: {user_id}, Mensagem: {message_text}")
    logger.info(f"Inten√ß√£o detectada: {intent}")
    logger.info(f"Entidades detectadas: {entities}")
    
    # Verificar se h√° medicamentos mencionados
    medicamentos = entities.get('medicamentos', [])
    
    # Personalizar resposta com base na inten√ß√£o e entidades
    if intent in RESPONSES:
        response = RESPONSES[intent]
        
        # Personalizar resposta para medicamentos espec√≠ficos
        if intent == 'info_medicamento' and medicamentos:
            medicine_name = medicamentos[0]
            response = (
                f"Aqui est√£o as informa√ß√µes sobre {medicine_name}:\n\n"
                "- Indica√ß√£o: [informa√ß√µes de indica√ß√£o]\n"
                "- Posologia: [informa√ß√µes de posologia]\n"
                "- Efeitos colaterais: [informa√ß√µes de efeitos colaterais]\n"
                "- Contraindica√ß√µes: [informa√ß√µes de contraindica√ß√µes]\n\n"
                "Posso ajudar com mais alguma informa√ß√£o sobre este medicamento?"
            )
        elif intent == 'preco' and medicamentos:
            medicine_name = medicamentos[0]
            response = f"O pre√ßo atual de {medicine_name} √© R$ XX,XX. Posso ajudar com mais alguma informa√ß√£o?"
        elif intent == 'disponibilidade' and medicamentos:
            medicine_name = medicamentos[0]
            response = f"Verificamos e temos {medicine_name} dispon√≠vel em estoque! Deseja saber o pre√ßo ou mais informa√ß√µes sobre este produto?"
    else:
        # Verificar se h√° sintomas mencionados
        sintomas = entities.get('sintomas', [])
        if sintomas:
            symptom = sintomas[0]
            response = (
                f"Entendi que voc√™ est√° com {symptom}. Para sintomas como este, posso recomendar:\n\n"
                "1. [Medicamento 1] - [breve descri√ß√£o]\n"
                "2. [Medicamento 2] - [breve descri√ß√£o]\n"
                "3. [Medicamento 3] - [breve descri√ß√£o]\n\n"
                "Lembre-se que esta √© apenas uma sugest√£o inicial. Para um diagn√≥stico preciso, consulte um m√©dico ou farmac√™utico."
            )
        else:
            response = RESPONSES['desconhecido']
    
    # Enviar a resposta
    await update.message.reply_text(response)

def main() -> None:
    """Fun√ß√£o principal para iniciar o bot"""
    # Criar o aplicativo
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # Adicionar handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("horario", horario_command))
    application.add_handler(CommandHandler("localizacao", localizacao_command))
    application.add_handler(CommandHandler("falar_humano", falar_humano_command))
    
    # Handler para mensagens de texto
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Iniciar o bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

